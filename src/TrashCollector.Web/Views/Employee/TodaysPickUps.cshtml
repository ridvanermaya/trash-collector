@model IEnumerable<TrashCollector.Web.Models.DCustomer>

@{
    ViewData["Title"] = "Index";

    var isConfirmed = Context.Request.Query.ContainsKey("confirmed");
}
@if(isConfirmed){
    <div class="alert alert-success">
        You successfully confirmed pickup for the customer.
    </div>
}
<div class="row" style="margin-left:0px;">
    <div class="cl-md-4">
        <form asp-controller="Employee" asp-action="TodaysPickUps" method="GET">
            <div class="form-group">
                <label>Filter By Day</label>
                <select name="Day" class="form-control">
                    <option value="0">Today</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                </select>   
            </div>
            <button class="btn btn-primary" type="submit">Filter</button>
        </form>
    </div>
</div>
<br>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickUpDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OneTimePickUpDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SuspendPickupsStart)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SuspendPickupsEnd)
            </th>
            <th>
                Action
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PickUpDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OneTimePickUpDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SuspendPickupsStart)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SuspendPickupsEnd)
            </td>
            <td>
                <a asp-action="ConfirmPickup" asp-route-id="@item.CustomerId">Confirm Pick Up</a>
            </td>
        </tr>
}
    </tbody>
@if(!Model.Any()){
   <tfoot>
        <tr>
            <td colspan="7">
                There is no pickups for selected date.
            </td>
        </tr>
    </tfoot>
} 
</table>

@{
    var addressList = (List<DAddress>)ViewBag.AddressList;
}

<h2>@addressList.Count customers on map</h2>
<div class="card">
    <div class="card-body">
        <div id="map" style="display: block; width: 100%; height: 400px">
        </div>
    </div>
</div>

@if(addressList.Any()){
<script>
function searchAddress(){
    var map = new google.maps.Map(document.getElementById('map'), {zoom: 10});

    var allAddress = @Json.Serialize(addressList);
    var geocoder = new google.maps.Geocoder;
    allAddress.map(x=>{
        var addressText = `${x.addressLine1}, ${x.addressLine2}, ${x.city}, ${x.stateAbbreviation}, ${x.zipCode}`;
        geocoder.geocode( { 'address': addressText}, function(results, status) {
            if (status == 'OK') 
            {
                map.setCenter(results[0].geometry.location);
                var infowindow = new google.maps.InfoWindow({
                    content: addressText
                });
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
                marker.addListener('click', function() {
                 infowindow.open(map, marker);
                });
            } 
            else 
            {
                console.log(addressText + " not found.");
            }
        });
    });
}

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=@Startup.GoogleMapApiKey&callback=searchAddress">
</script>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}