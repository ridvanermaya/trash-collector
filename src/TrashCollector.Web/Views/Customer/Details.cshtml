@model TrashCollector.Web.Models.DCustomer

@{
    ViewData["Title"] = "Details";
}

<div>
    <h4>Details</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.PickUpDay)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.PickUpDay)
        </dd>
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.OneTimePickUpDate)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.OneTimePickUpDate)
        </dd>
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.SuspendPickupsStart)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.SuspendPickupsStart)
        </dd>
        <dt class = "col-sm-3">
            @Html.DisplayNameFor(model => model.SuspendPickupsEnd)
        </dt>
        <dd class = "col-sm-9">
            @Html.DisplayFor(model => model.SuspendPickupsEnd)
        </dd>
    </dl>
</div>
<div id="map" class="shadow" style="width:500px; height: 320px;"></div>
<script>
function searchAddress(){
    var geocoder = new google.maps.Geocoder;
    geocoder.geocode( { 'address': '@ViewBag.Address'}, function(results, status) {
      if (status == 'OK') {
        var map = new google.maps.Map(document.getElementById('map'), {zoom: 15});
        map.setCenter(results[0].geometry.location);
        var marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
        });
      } else {
        document.querySelector("#map").innerHTML = "<span style='color:red;'>Address not found.</span>";
      }
    });
}
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=@Startup.GoogleMapApiKey&callback=searchAddress">
</script>
<br>
<div>
    <a asp-action="Edit" asp-route-id="@Model.CustomerId">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
